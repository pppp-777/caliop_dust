#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Mar 28 13:01:09 2021

@author: kamesh
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Mar 21 18:49:57 2021

@author: kamesh
"""
from IPython import get_ipython
get_ipython().magic('reset -sf')
import matplotlib.cm as cm
import math

import numpy as np
import numpy.ma as ma
import glob
import cartopy.crs as ccrs

import matplotlib as mpl
import matplotlib.pyplot as plt

from pyhdf.SD import SD, SDC
from matplotlib import colors

from pyhdf.HDF import *
from pyhdf.V import *

def readc(filename, datafield):
    hdf = SD(filename, SDC.READ)
    data2D = hdf.select(datafield)
    data = data2D[:,:]
    hdf.end()
    return data

def files_cci(cc, SDATE, EDATE):
    
    from datetime import datetime
    import re

    SDATE_DT = datetime.strptime(SDATE, "%Y%m")
    EDATE_DT = datetime.strptime(EDATE, "%Y%m")
    
    allats = sorted(glob.glob(cc+'*CAL_LID_L2_05kmAPro??'+'*.hdf'))
    sfiles = []
    sdates = []

    for file in allats:
        year_cal=file[62:66]
        month_cal=file[67:69]
        
        dates = year_cal + month_cal

        dates_dt = datetime.strptime(dates, "%Y%m")
        
        if SDATE_DT <= dates_dt <= EDATE_DT and (dates_dt.month==4 or dates_dt.month==5 or dates_dt.month==6):
            sfiles.append(file)
            sdates.append(dates_dt)
     
    return sfiles


SDATE='199801'
EDATE='201612'

direc_arm='/home/kamesh/i/second/2015/'
sfiles_1=files_cci(direc_arm, SDATE, EDATE)

list_of_paths=sorted(sfiles_1)

resolution=1
lat_grid =np.arange(0,41,resolution)
lat_grid=np.flip(lat_grid)
lon_grid =np.arange(40,101,resolution)
    
aod_5dust = np.empty((len(lat_grid), len(lon_grid)))
aod_5dust[:] = np.nan

fre_5dust = np.empty((len(lat_grid), len(lon_grid)))
fre_5dust[:] = np.nan
    
aod_5dust_div = np.empty((len(lat_grid), len(lon_grid)))
aod_5dust_div[:] = 0

aod_0dust = np.empty((len(lat_grid), len(lon_grid)))
aod_0dust[:] = np.nan

fre_0dust = np.empty((len(lat_grid), len(lon_grid)))
fre_0dust[:] = np.nan
    
aod_0dust_div = np.empty((len(lat_grid), len(lon_grid)))
aod_0dust_div[:] = 0

for h in range (0,(len(list_of_paths))):
    
    FILE_NAME = list_of_paths[h]
    
    f = HDF(FILE_NAME, SDC.READ) 
    vs = f.vstart()
    vdata_lat = vs.attach('metadata')
    m_data=vdata_lat[0]
    alt=m_data[14]
    vdata_lat.detach()
    vs.end() 
    f.close()
    
    lat = readc(FILE_NAME,'Latitude')
    lon = readc(FILE_NAME,'Longitude')
    
    ext_coe=readc(FILE_NAME,'Extinction_Coefficient_532')
    ext_QC=readc(FILE_NAME,'Extinction_QC_Flag_532')
    ext_unc=readc(FILE_NAME,'Extinction_Coefficient_Uncertainty_532')
    CAD=readc(FILE_NAME,'CAD_Score')
    AVD=readc(FILE_NAME,'Atmospheric_Volume_Description')
    
    ftype = AVD & 7
    typeBits = AVD >> 9           
    subtype = typeBits & 7
    
    CAD_fill = -127
    CAD[CAD == -101] = 105
    CAD[CAD > 0] = CAD_fill
    
    ext_QCfill = 32768
    ext_QC[ftype != 3] = ext_QCfill
    
    aerosol_type = np.zeros_like(ftype)
    goodCAD = np.zeros_like(ext_coe)
    goodAerosol = np.zeros_like(ext_coe)
    goodExtQC = np.zeros_like(ext_coe)
    
    [a,b,c]=ftype.shape
    
    for i in range(0,a):
        for j in range(0,b):
            goodCAD[i,j]=np.squeeze((CAD[i,j,0] < -20 or CAD[i,j,0] == CAD_fill) and 
                                    (CAD[i,j,1] < -20 or CAD[i,j,1] == CAD_fill))
            if ((ftype[i,j,0] == 3) or (ftype[i,j,1] == 3)):
                goodAerosol[i,j]= np.squeeze((subtype[i,j,0] == 2) or (subtype[i,j,1] == 2))
            # goodAerosol[i,j]= np.squeeze((ftype[i,j,0] == 3) or (ftype[i,j,1] == 3))
            goodExtQC[i,j] = np.squeeze((ext_QC[i,j,0] == 0 or ext_QC[i,j,0] == 1 or ext_QC[i,j,0] == 2 or ext_QC[i,j,0] == 16 or 
                                         ext_QC[i,j,0] == 18 or ext_QC[i,j,0] == ext_QCfill) and 
                                        (ext_QC[i,j,1] == 0 or ext_QC[i,j,1] == 1 or ext_QC[i,j,1] == 2 or ext_QC[i,j,1] == 16 or 
                                         ext_QC[i,j,1] == 18 or ext_QC[i,j,1] == ext_QCfill))
        
    # for k in range(0,c):
    #     if ftype[i,j,k] == 3 and subtype[i,j,k]==2:
    #         aerosol_type[i,j,k] = subtype[i,j,k]
                    
    useSamples = np.ones(ext_coe.shape,dtype=bool)
    useSamples[ext_coe == -9999] = 0
    useSamples[ext_coe < 0] = 0
    useSamples[ext_unc>99.9] = 0
    useSamples[goodCAD==0] = 0
    useSamples[goodAerosol==0] = 0
    useSamples[goodExtQC==0] = 0
    
    ext_coe[useSamples==0] = np.nan
    
    alt_id = np.fabs(np.array(alt) - 1)
    alt_id1 = np.fabs(np.array(alt) - 1.5)
    
    id0=np.unravel_index(alt_id.argmin(), alt_id.shape)
    id00=np.unravel_index(alt_id1.argmin(), alt_id1.shape)
    
    ext_coe_5 = ext_coe[:,id00[0]:id0[0]]
    ext_coe_0 = ext_coe[:,id0[0]:]
    
    ext_coe_5avg = np.nanmean(ext_coe_5, axis=1)
    ext_coe_5avg=ext_coe_5avg*0.60
    
    ext_coe_0avg = np.nanmean(ext_coe_0, axis=1)
    ext_coe_0avg=ext_coe_0avg*0.60
    
    f5=len(ext_coe_5.T)
    f0=len(ext_coe_0.T)
    
    ext_coe_5fre=np.count_nonzero(~np.isnan(ext_coe_5), axis=1)/f5
    ext_coe_0fre=np.count_nonzero(~np.isnan(ext_coe_0), axis=1)/f0
         
    for k1 in range(0,len(lat)):
        lat1=lat[k1,1]
        lon1=lon[k1,1]
        
        # if ext_coe_avg[k1] != np.nan:
        if math.isnan(ext_coe_5avg[k1])==False:
            lat_id = np.fabs(lat_grid  - lat1)
            id1=np.unravel_index(lat_id.argmin(), lat_id.shape)
            
            lon_id = np.fabs(lon_grid  - lon1)
            id2=np.unravel_index(lon_id.argmin(), lon_id.shape)
            
            sum_col = [aod_5dust[id1,id2],ext_coe_5avg[k1]]
            
            aod_5dust[id1,id2] = np.nansum(sum_col)
            aod_5dust_div[id1,id2] =aod_5dust_div[id1,id2]+1
            
            fre_5col = [fre_5dust[id1,id2],ext_coe_5fre[k1]]
            fre_5dust[id1,id2] = np.nansum(fre_5col)
            
    for k1 in range(0,len(lat)):
        lat1=lat[k1,1]
        lon1=lon[k1,1]
        
        # if ext_coe_avg[k1] != np.nan:
        if math.isnan(ext_coe_0avg[k1])==False:
            lat_id = np.fabs(lat_grid  - lat1)
            id1=np.unravel_index(lat_id.argmin(), lat_id.shape)
            
            lon_id = np.fabs(lon_grid  - lon1)
            id2=np.unravel_index(lon_id.argmin(), lon_id.shape)
            
            sum_col = [aod_0dust[id1,id2],ext_coe_0avg[k1]]
            
            aod_0dust[id1,id2] = np.nansum(sum_col)
            aod_0dust_div[id1,id2] =aod_0dust_div[id1,id2]+1
            
            fre_0col = [fre_0dust[id1,id2],ext_coe_0fre[k1]]
            fre_0dust[id1,id2] = np.nansum(fre_0col)



aod_5d=aod_5dust/aod_5dust_div
aod_0d=aod_0dust/aod_0dust_div

import cartopy

ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_global()

ax.set_extent([30, 120, -5, 55], crs=ccrs.PlateCarree())
    
ax.add_feature(cartopy.feature.OCEAN, color='white', zorder=0)
ax.add_feature(cartopy.feature.LAND, color='lightgray',zorder=0, 
                    linewidth=0.5, edgecolor='black')

ax.gridlines(draw_labels=True, linewidth=0.5, color='gray', 
                  xlocs=range(-180,180,15), ylocs=range(-90,90,15))
        
ax.coastlines(resolution='50m', linewidth=0.3, color='black')
ax.legend()
ax.set_title('Py: de-rotated grid (cartopy)', fontsize=10, fontweight='bold')
colormap = "Wistia"
# crs = ccrs.RotatedPole(pole_longitude=pole_lon, pole_latitude=pole_lat)
clevs = np.arange(0,0.5,0.01)

ax.contourf(lon_grid, lat_grid, aod_5d, clevs, cmap=colormap)


# dst_filename = 'xxx.tiff'
# x_pixels = 61  # number of pixels in x
# y_pixels = 41  # number of pixels in y
# driver = gdal.GetDriverByName('GTiff')
# dataset = driver.Create(dst_filename,x_pixels, y_pixels, 1,gdal.GDT_Float32)
# dataset.GetRasterBand(1).WriteArray(array)

# # follow code is adding GeoTranform and Projection
# geotrans=data0.GetGeoTransform()  #get GeoTranform from existed 'data0'
# proj=data0.GetProjection() #you can get from a exsited tif or import 
# outds.SetGeoTransform(geotrans)
# outds.SetProjection(proj)
# outds.FlushCache()
# outds=None



